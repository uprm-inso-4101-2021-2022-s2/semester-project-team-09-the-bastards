// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User profile information, the person itself basically
model User {
  uid        Int       @id @default(autoincrement())
  first_name String
  last_name  String
  birth_date DateTime
  Login      Login?
  Comment    Comment[]

  Patient Patient[]
  Post    Post[]
  Profile Profile?
  Medic   Medic[]
  @@map("users")
}

// Controls the credentials of a user
model Login {
  id       Int     @id @default(autoincrement())
  user_id  Int     @unique
  email    String  @unique
  password String?
  user     User    @relation(fields: [user_id], references: [uid])
  @@map("logins")
}

model Patient {
  pid     Int  @id @default(autoincrement())
  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [uid])

  @@map("patients")
}

model Office {
  oid         Int        @id @default(autoincrement())
  office_name String
  address     Address    @relation(fields: [adressAid], references: [aid])
  open_time   DateTime[]
  close_time  DateTime[]
  adressAid   Int
  Post        Post[]
  Schedule    Schedule[]

  @@map("offices")
}

model Address {
  aid     Int      @id @default(autoincrement())
  street  String
  city    String
  state   String
  zipcode String
  Office  Office[]

  @@map("adresses")
}

model Medic {
  mid     Int    @id @default(autoincrement())
  user    User   @relation(fields: [userUid], references: [uid])
  liscense String
  specialty String
  experience Int
  description String
  Post    Post[]
  userUid Int

  @@map("medics")
}

model Schedule {
  sid         Int           @id @default(autoincrement())
  Appointment Appointment[]
  location    Office        @relation(fields: [officeOid], references: [oid])
  officeOid   Int

  @@map("schedules")
}

model Appointment {
  aid         Int      @id @default(autoincrement())
  schedule    Schedule @relation(fields: [scheduleSid], references: [sid])
  scheduleSid Int

  @@map("appointments")
}

// Main Post thingy
model Post {
  rid       Int       @id @default(autoincrement())
  title     String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  score     Int
  author    User      @relation(fields: [userUid], references: [uid])
  to_medic  Medic     @relation(fields: [medicMid], references: [mid])
  to_office Office    @relation(fields: [officeOid], references: [oid])
  comments  Comment[]

  userUid   Int
  medicMid  Int
  officeOid Int
  @@map("posts")
}

model Profile {
  id      Int     @id @default(autoincrement())
  bio     String?
  user    User    @relation(fields: [userUid], references: [uid])
  userUid Int     @unique

  @@map("profiles")
}

model Comment {
  cid             Int       @id @default(autoincrement())
  text            String
  date            DateTime
  author          User      @relation(fields: [userUid], references: [uid])
  replies         Comment[] @relation("replies")
  repliesRelation Comment[] @relation("replies")

  replying Comment? @relation("reply")
  replyer  Comment  @relation("reply", fields: [replyerId], references: [cid])

  Post Post? @relation(fields: [PostRid], references: [rid])

  replyerId Int  @unique
  PostRid   Int?
  userUid   Int
  @@map("comments")
}


// model MedicalCategory {
//   catid Int @id @default(autoincrement()) @map("category_id")
//   name String
//   @@map("medical_categories")
// }